### easy
1. 用 add first 或 add last 这套新的 API 改写 Deque 的代码
略
2. 分析 Queue 和 Priority Queue 的源码
略

删除排序数组中的重复项（Facebook、字节跳动、微软在半年内面试中考过）
快慢指针，满指针i只用来指向不重复的元素，快指针用来遍历数组，只有在j的位置的元素不等于i时，才需要更新i
class Solution {
    public int removeDuplicates(int[] nums) {
    if (nums.length == 0) return 0;
    int i = 0;
    for (int j = 1; j < nums.length; j++) {
        if (nums[j] != nums[i]) {
            i++;
            nums[i] = nums[j];
        }
    }
    return i + 1;
    }
}

三数之和
https://leetcode-cn.com/problems/3sum/solution/san-shu-zhi-he-by-leetcode-solution/
这边需要两个操作，排序O(nlogn)+二重循环的O(n^2)，所以总的时间复杂度是O(n^2)。其中二重循环使用了先确定一个元素，然后二重指针夹逼的方式
5. 加一
O（n）的复杂度，每次只有两种情况，9+1进位和非进位
最后如果是999之类的情况，需要将原数组长度加一
class Solution {
    public int[] plusOne(int[] digits) {
        int len = digits.length;
        for(int i = len - 1; i >= 0; i--) {
            digits[i]++;
            digits[i] %= 10;
            if(digits[i]!=0)
                return digits;
        }
        digits = new int[len + 1];
        digits[0] = 1;
        return digits;
    }
}

爬楼梯
Week#1 典型题目讲解 1
爬楼梯：
这道题目普通的递归类似斐波那契数列的方法就不讲了，这边给大家讲一个使用动态规划的方式求解，就当给后面的课程预习了
第一步：首先动态规划需要确定一个递推公式或者叫状态转移方程，这里的递推公式为：
dp[n] = dp[n-1] + dp[n-2]
即第n个台阶的解决方案是由n-1和n-2这两个解决方案的总和，
第二步：确认dp0和dp1的初始边界的解决方案，分别是上了第0台阶和第1台阶，这边其实都只有1种方案，
所以整个动态规划的代码其实非常简单：
class Solution {
    public int climbStairs(int n) {
        int[] dp = new int[n + 1];
       // 确认初始解决方案
        dp[0] = 1;
        dp[1] = 1; 
        for(int i = 2; i <= n; i++) {
           // 确认解决方案的递推公式或者状态转移方程
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
}

移动0
之所以把这道题目拿出来讲解，是因为真的非常典型，和数组操作中的常见的两边加逼法齐名的双指针法，这边同样是维护两个指针i和j
其中指针i用来正常遍历数组，这是一个比较常见的套路，而另一个指针j，则仅仅用来记录左边非0的位置
我们从左到右遍历数组，一旦i的位置非0，则交换i和j的位置，确保j的位置一定非0，这样就可以把所有非0的都交换到数组的最左侧
代码其实非常简单，重要的是要理解两个指针的思想
class Solution {
 public void moveZeroes(int[] nums) {
  if(nums==null) {
   return;
  }
  //两个指针i和j
  int j = 0;
  for(int i=0;i<nums.length;i++) {
   //当前元素!=0，就把其交换到左边，等于0的交换到右边
   if(nums[i]!=0) {
    int tmp = nums[i];
    nums[i] = nums[j];
    nums[j++] = tmp;
   }
  }
 }
}

Week#1 典型题目讲解 3
盛水最多的容器
细节就不多说了，相当于两边夹逼的一个变种，超哥视频里面也有讲到。这边需要理解的一个难点是，为什么每次移动短的那根柱子，就能保证尝试的策略是最多的水
原因其实很简单，在当前较长的X轴的长度下，高度其实是以短的那根柱子为高度的，如果移动长的那根，就算移动后比原先那根还长，同样面积会比原来的小，因为还是原先短的那根为高度
相反，如果移动短的那根，虽然X变短了，但是高度有可能突破之前的高度，是值得尝试的
最后总结一下，两边夹逼法，核心是要有一些限制的情况下才能使用，比如这道题目，X轴移动前一定比移动后短之类的限制
代码我就不贴了
