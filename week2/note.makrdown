前K个高频元素
这道题核心的数据结构主要是两个，第一个字典hashmap，维护元素和出现次数的KV，这步count的复杂度是N（N为输入串的长度）
第二个数据结构是优先队列，由于我们只需要前K个元素，所以维护一个K个元素的小顶堆即可，向堆中添加元素的复杂度是log(k)，需要将所有元素的出现次数都add到这个堆中，所以这一步的复杂度是Nlog(k)，最后将小顶堆倒叙输出，复杂度是k(logk)
所以总的时间的复杂度是n+nlogk+klogk, 由于n>k，所以总的时间复杂度是nlogk,（其实粗略点写成nlogn我觉得也可以）
空间复杂度是n的hash表以及k的堆，所以空间复杂度是n
所以你的答案基本上是正确的。
*** 这里需要注意的点是，要使用小顶堆维护k个元素，这样移除堆顶元素才是正确的。使用大顶堆，堆顶是最大元素，不管新来的元素是小于还是大于堆顶元素，都没有办法移除堆顶元素

N叉树的遍历
这里使用迭代+stack的方式进行遍历
举个例子
root
子节点是
v1 v2 v3
其中v1的子节点是
v4
这里要完成整个前序遍历，期望的输出的list为root, v1, v2, v3，
这里使用stack模拟的话，需要确保每个节点的孩子节点是倒序放入stack的，举个例子，root先放到stack之后，将它的孩子节点倒序放入stack中
v3, v2, v1，这样弹栈时就是先弹出v1, 进行处理，然后再把v1的孩子孩子节点倒序存入stack，老的DFS的状态使用stack来保存维护了

字母异位词分组
这里的核心思想是维护一个hashmap，其中key是同一分组相关字符串排序后的结果，然后将真实的字符串作为value存入改key桶中

N 叉树的层序遍历
借着这道题目，来聊一下广度优先遍历的方式
class Solution {

    public List<List<Integer>> levelOrder(Node root) { 
        // 结果集，用来存放不同的level的串
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) return result;
        // queue，用来辅助运作整个广度优先遍历
        Queue<Node> queue = new LinkedList<>();
        //首先先把root放入到queue中，启动广度优先遍历
        queue.add(root);
        // 广度优先的常规套路，queue只要不为空就一直可以往下运作
        while (!queue.isEmpty()) {
            List<Integer> level = new ArrayList<>();
            // 这一步是核心，广度优先遍历，需要把当前queue中的所有节点拿出来，对每一个拿出来的节点，将它放到level中去。
            // 同时将它下面的所有子节点，放入到queue中待处理
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                Node node = queue.poll();
                level.add(node.val);
                queue.addAll(node.children);
            }
            当前层处理完了，将level的快照存入result中
            result.add(level);
        }
        return result;
    }
}


